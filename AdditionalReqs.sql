SELECT * FROM EMPLOYEE WHERE POSITION LIKE '% sales associate' ORDER BY StartDate ASC;
SELECT CustID, COUNT(CustID) AS Purchases FROM SALES GROUP BY CustID;

DELIMITER $$
CREATE TRIGGER ShelfFull 
	BEFORE INSERT ON PRODUCT 
    FOR EACH ROW 
    BEGIN
		DECLARE ItemsOnShelf INT;
        SELECT COUNT(*) FROM PRODUCT WHERE Location = New.Location INTO ItemsOnShelf;
        IF(ItemsOnShelf >= 10) THEN
			SET NEW.Location = 1;
		END IF;
	END;


CREATE VIEW ProductLocation AS SELECT PID, Name, Descript, Price, Color, Stock, LOCATION.Aisle, LOCATION.Shelf, AREA.AreaName, AREA.StoreID FROM PRODUCT INNER JOIN LOCATION ON PRODUCT.location = LOCATION.LocID INNER JOIN AREA ON LOCATION.AreaID = AREA.AreaID;
CREATE VIEW EmployeeContactInfo AS SELECT EMPLOYEE.EmpID, FirstName, LastName, StartDate, Position, TermID, EMPINFO.StreetAddress, EMPINFO.City, EMPINFO.State, EMPINFO.Zip, EMPINFO.Email, EMPINFO.Phone FROM EMPLOYEE INNER JOIN EMPINFO ON EMPLOYEE.EmpID = EMPINFO.EmpID;
CREATE VIEW FullSale AS SELECT SALES.EmpID, EMPLOYEE.FirstName AS EmpFName, EMPLOYEE.LastName AS EmpLName, SALES.TransactionID, SALES.SaleDate, SALES.CustID, CUSTOMER.FirstName AS CustFName, Customer.LastName AS CustLastName, SALES.ProductID, SALES.PaymentID, PAYMENTMETHODS.Cash, PAYMENTMETHODS.CardNum, PAYMENTMETHODS.CSC, PAYMENTMETHODS.CardHolderName, PAYMENTMETHODS.ExprMonth, PAYMENTMETHODS.ExprYear FROM SALES, EMPLOYEE, CUSTOMER, PAYMENTMETHODS WHERE SALES.EmpID = EMPLOYEE.EmpID AND SALES.CustID = CUSTOMER.CustID AND SALES.PaymentID = PAYMENTMETHODS.PaymentID;  
SELECT * FROM ProductLocation WHERE PID = 2;
SELECT * FROM EmployeeContactInfo;
SELECT * FROM FullSale;

SELECT PID, Name, Stock, Aisle, Shelf, AreaName FROM ProductLocation WHERE PID = 2;

SELECT EmpID, Count(EmpID) AS SaleCount FROM SALES WHERE EmpID = 1 AND SaleDate = '2021-01-29';
SELECT EmpID, Count(EmpID) AS SaleCount FROM SALES WHERE EmpID = 1 AND SaleDate >= '2021-01-24' AND SaleDate <= '2021-01-30';
SELECT EmpID, Count(EmpID) AS SaleCount FROM SALES WHERE EmpID = 1 AND SaleDate LIKE '2021-01-__';
SELECT * FROM SALES;
SELECT Count(TransactionID) AS SaleCount FROM SALES WHERE SaleDate = '2021-01-29';
SELECT Count(TransactionID) AS SaleCount FROM SALES WHERE SaleDate >= '2021-01-24' AND SaleDate <= '2021-01-30';
SELECT Count(TransactionID) AS SaleCount FROM SALES WHERE SaleDate LIKE '2021-01-__';

SELECT FirstName, LastName, StartDate, Position, Email, Phone FROM employeecontactinfo WHERE Position LIKE '% Manager' AND TermID IS NULL;

SELECT * FROM EMPLOYEE WHERE TermID IN (SELECT TermID FROM TERMINATION);
SELECT * FROM TERMINATION;

SELECT * FROM ProductLocation;
UPDATE ProductLocation SET Price = Price + .10 WHERE AREANAME = 'Men''s Apparel';

SELECT  Sum(PRICE * STOCK) AS TotalValue FROM PRODUCT;


SELECT * FROM EMERGENCYCONTACT WHERE Employee = 13;
INSERT INTO EMERGENCYCONTACT (FirstName, LastName, Phone, Email, Relationship, Employee) VALUES ('Jonathon', 'Taylor', '3308912866', 'JT28@gmail.com', 'Friend', 13);   

SELECT * FROM EMPLOYEE WHERE EmpID = 4;
UPDATE EMPLOYEE SET Wage = Wage + .05 WHERE EmpID = 4; 
INSERT INTO TERMINATION (TermDate, Reason, TermCode) VALUES ('2021-12-06', 'Underperformance', 1000); 
UPDATE EMPLOYEE SET TermID = (SELECT MAX(TermID) FROM TERMINATION) WHERE EmpID = 5; 
SELECT * FROM EMPLOYEE INNER JOIN TERMINATION ON EMPLOYEE.TermID = TERMINATION.TermID;

SELECT * FROM PRODUCT WHERE COLOR LIKE '%Yellow'; 
SELECT * FROM PRODUCT WHERE WEIGHT < 1;

SELECT * FROM PRODUCT WHERE COLOR = 'Red' OR COLOR = 'Yellow' OR COLOR = 'Green';
SELECT * FROM PRODUCT WHERE COLOR = 'Yellow';
SELECT * FROM PRODUCT WHERE COLOR = 'Green'; 

SELECT * FROM PRODUCT WHERE Stock < ReorderPoint; 
SELECT SUM(Cost * ReorderPoint) AS CostToOrder FROM PRODUCT WHERE Stock < ReorderPoint; 
ALTER TABLE AREA ADD StoreName varchar(255);
SELECT ProductID, COUNT(ProductID) AS NumberSold FROM SALES GROUP BY ProductID ORDER BY NumberSold DESC;
CREATE VIEW PROFITSCALC AS SELECT * FROM SALES INNER JOIN PRODUCT ON SALES.ProductID = PRODUCT.PID;
SELECT * FROM PROFITSCALC;
SELECT ProductID, (Price - Cost) * COUNT(ProductID) AS Profit FROM PROFITSCALC GROUP BY ProductID Order By Profit DESC;